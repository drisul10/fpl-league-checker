name: Deploy to VPS

on:
  push:
    branches: [ main, master ]
    paths:
      - 'web/**'
      - '.github/workflows/deploy-vps.yml'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip-vps]')"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    # Create production bundle
    - name: Create production bundle
      run: |
        cd web
        # Create deployment archive excluding dev files
        tar --exclude='node_modules' \
            --exclude='reports' \
            --exclude='.env.local' \
            --exclude='*.log' \
            -czf ../fpl-app.tar.gz .
        cd ..
        echo "✅ Production bundle created: $(ls -lh fpl-app.tar.gz)"

    # Deploy to VPS
    - name: Deploy to VPS
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
        port: ${{ secrets.VPS_SSH_PORT || 22 }}
        source: "fpl-app.tar.gz"
        target: "/tmp/"

    # SSH Commands - Deploy and restart
    - name: Deploy and restart application
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
        port: ${{ secrets.VPS_SSH_PORT || 22 }}
        script: |
          set -e
          
          # Configuration
          APP_DIR="${{ secrets.APP_DIR }}"
          APP_NAME="fpl-checker"
          DOMAIN="${{ secrets.DOMAIN }}"
          PORT="${{ secrets.PORT }}"
          
          echo "🚀 Starting deployment to $DOMAIN"
          
          # Create app directory if it doesn't exist
          echo "${{ secrets.VPS_PASSWORD }}" | sudo -S mkdir -p $APP_DIR
          echo "${{ secrets.VPS_PASSWORD }}" | sudo -S chown $USER:$USER $APP_DIR
          
          # Backup current version (if exists)
          if [ -d "$APP_DIR/current" ]; then
            echo "📦 Backing up current version..."
            rm -rf $APP_DIR/backup 2>/dev/null || true
            mv $APP_DIR/current $APP_DIR/backup
          fi
          
          # Extract new version
          echo "📂 Extracting new version..."
          mkdir -p $APP_DIR/current
          cd $APP_DIR/current
          tar -xzf /tmp/fpl-app.tar.gz
          rm /tmp/fpl-app.tar.gz
          
          # Install dependencies
          echo "📦 Installing production dependencies..."
          npm install --only=production
          
          # Setup environment
          echo "⚙️ Configuring environment..."
          if [ ! -f .env.local ]; then
            cp .env.production .env.local
            # Update with actual domain and port
            sed -i "s/yourdomain.com/$DOMAIN/g" .env.local
            sed -i "s/PORT=3001/PORT=$PORT/g" .env.local
            sed -i "s/NODE_ENV=development/NODE_ENV=production/g" .env.local
            echo "✅ Created .env.local with production settings"
          else
            echo "⚠️ Using existing .env.local"
          fi
          
          # Install PM2 globally if not exists
          if ! command -v pm2 &> /dev/null; then
            echo "📦 Installing PM2..."
            echo "${{ secrets.VPS_PASSWORD }}" | sudo -S npm install -g pm2
            pm2 startup || true
          fi
          
          # Stop existing process
          echo "🛑 Stopping existing application..."
          pm2 stop $APP_NAME 2>/dev/null || echo "No existing process to stop"
          pm2 delete $APP_NAME 2>/dev/null || echo "No existing process to delete"
          
          # Start application with PM2
          echo "🚀 Starting application with PM2..."
          pm2 start ecosystem.config.js --env production
          pm2 save
          
          
          # Health check
          echo "🏥 Performing health check..."
          sleep 5
          if curl -f http://localhost:$PORT/health >/dev/null 2>&1; then
            echo "✅ Application is running successfully!"
            curl -s http://localhost:$PORT/health | jq '.'
            echo "🌐 Access your app at: http://$DOMAIN"
          else
            echo "❌ Health check failed!"
            echo "🔍 Testing basic connectivity..."
            curl -I http://localhost:$PORT/ || echo "Basic connection failed"
            echo "📋 PM2 Status:"
            pm2 list
            echo "📝 Recent logs:"
            pm2 logs $APP_NAME --lines 20
            exit 1
          fi
          
          # Cleanup old backup
          rm -rf $APP_DIR/backup 2>/dev/null || true
          
          echo "🎉 Deployment completed successfully!"
          echo "📊 PM2 Status:"
          pm2 list